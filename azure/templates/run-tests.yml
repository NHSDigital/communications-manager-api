parameters:
  - name: test_command
    type: string
  - name: unit_test_report_name
    type: string
    default: ''
  - name: nightly 
    type: boolean
    default: false
  - name: environment
    type: string
    default: internal-dev

steps:
  - template: "azure/components/aws-assume-role.yml@common"
    parameters:
      role: "auto-ops"
      profile: "apm_ptl"

  - template: "azure/components/get-aws-secrets-and-ssm-params.yml@common"
    parameters:
      secret_file_ids:
      - ptl/app-credentials/jwt_testing/non-prod/JWT_TESTING_PRIVATE_KEY
      - ptl/api-deployment/communications-manager/NON_PROD_PRIVATE_KEY
      - ptl/api-deployment/communications-manager/INTEGRATION_PRIVATE_KEY
      - ptl/azure-devops/communications-manager/PRODUCTION_PRIVATE_KEY
      secret_ids:
      - ptl/app-credentials/communications-manager-testing-app/non-prod/SANDBOX_APP_ID
      - ptl/api-deployment/communications-manager/NON_PROD_API_KEY
      - ptl/api-deployment/communications-manager/NON_PROD_API_KEY_TEST_1
      - ptl/api-deployment/communications-manager/INTEGRATION_API_KEY
      - ptl/azure-devops/communications-manager/PRODUCTION_API_KEY
      - ptl/api-deployment/communications-manager/GUKN_API_KEY
      - ptl/api-deployment/communications-manager/UAT_GUKN_API_KEY
      - ptl/api-deployment/communications-manager/UAT_NHS_APP_USERNAME
      - ptl/api-deployment/communications-manager/UAT_NHS_APP_PASSWORD
      - ptl/api-deployment/communications-manager/UAT_NHS_APP_OTP
  - bash: |
      if [ "${{ parameters.nightly }}" != "True" ]; then
        cd $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
      fi
      make install-python
      make install-node
    displayName: Setup pytests
    condition: always()

  - bash: |
      if [ "${{ parameters.nightly }}" != "True" ]; then
        cd $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
      else
        export APIGEE_ENVIRONMENT="${{parameters.environment}}"
      fi

      proxyURL="https://$APIGEE_ENVIRONMENT.api.service.nhs.uk/$SERVICE_BASE_PATH/comms/_status"

      if [ "$APIGEE_ENVIRONMENT" == "prod" ]; then
        proxyURL="https://api.service.nhs.uk/$SERVICE_BASE_PATH/comms/_status"
      fi

      proxyResponse=$(
      curl --request GET $proxyURL \
           --header 'Content-Type: application/vnd.api+json' \
           --header 'Authorization: Bearer $bearerToken'
      )
      echo "$proxyResponse"
      errorResponse=$(echo $proxyResponse | jq ".errors[0]")
      status=$(echo $errorResponse | jq -r ".status")
      code=$(echo $errorResponse | jq -r ".code")

      if [[ ($status == "404" && $code == "CM_NOT_FOUND") || ($status == "401" && $code == "CM_DENIED") ]]; then
          exit 0
      else
          exit 1
      fi
    displayName: Check proxy is deployed
    retryCountOnTaskFailure: 10

  - ${{ if parameters.nightly }}:
    - ${{ if eq(parameters.environment, 'prod') }}:
      - template: "azure/components/get-aws-secrets-and-ssm-params.yml@common"
        parameters:
          secret_ids:
            - ptl/azure-devops/apigee-prod/APIGEE_PASSWORD
            - ptl/azure-devops/apigee-prod/APIGEE_OTP_KEY
            - ptl/azure-devops/apigee-prod/APIGEE_USERNAME
      - template: "azure/components/get-mfa-code.yml@common"
        parameters:
          apigee_otp_key: $(APIGEE_OTP_KEY)
      - template: "azure/components/get-access-token.yml@common"
        parameters:
          apigee_organization: "prod"
          apigee_username: $(APIGEE_USERNAME)
          apigee_password: $(APIGEE_PASSWORD)
      - bash: |
          export PRODUCTION_PRIVATE_KEY="$(Pipeline.Workspace)/secrets/$(PRODUCTION_PRIVATE_KEY)"
          export PRODUCTION_API_KEY="$(PRODUCTION_API_KEY)"
          export API_ENVIRONMENT="${{parameters.environment}}"
          export PROXY_NAME="communications-manager-${{parameters.environment}}"
          ${{ parameters.test_command }}
        displayName: Run nightly test suite
    - ${{ elseif eq(parameters.environment, 'int') }}:
      - template: "azure/components/get-aws-secrets-and-ssm-params.yml@common"
        parameters:
          secret_ids:
            - ptl/azure-devops/apigee-prod/APIGEE_PASSWORD
            - ptl/azure-devops/apigee-prod/APIGEE_OTP_KEY
            - ptl/azure-devops/apigee-prod/APIGEE_USERNAME
      - template: "azure/components/get-mfa-code.yml@common"
        parameters:
          apigee_otp_key: $(APIGEE_OTP_KEY)
      - template: "azure/components/get-access-token.yml@common"
        parameters:
          apigee_organization: "prod"
          apigee_username: $(APIGEE_USERNAME)
          apigee_password: $(APIGEE_PASSWORD)
      - bash: |
          export INTEGRATION_PRIVATE_KEY="$(Pipeline.Workspace)/secrets/$(INTEGRATION_PRIVATE_KEY)"
          export INTEGRATION_API_KEY="$(INTEGRATION_API_KEY)"
          export API_ENVIRONMENT="${{parameters.environment}}"
          export PROXY_NAME="communications-manager-${{parameters.environment}}"
          ${{ parameters.test_command }}
        displayName: Run nightly test suite
    - ${{ elseif eq(parameters.environment, 'sandbox') }}:
      - template: "azure/components/get-aws-secrets-and-ssm-params.yml@common"
        parameters:
          secret_ids:
            - ptl/azure-devops/apigee-prod/APIGEE_PASSWORD
            - ptl/azure-devops/apigee-prod/APIGEE_OTP_KEY
            - ptl/azure-devops/apigee-prod/APIGEE_USERNAME
      - template: "azure/components/get-mfa-code.yml@common"
        parameters:
          apigee_otp_key: $(APIGEE_OTP_KEY)
      - template: "azure/components/get-access-token.yml@common"
        parameters:
          apigee_organization: "prod"
          apigee_username: $(APIGEE_USERNAME)
          apigee_password: $(APIGEE_PASSWORD)
      - bash: |
          export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
          export APIGEE_APP_ID="$(SANDBOX_APP_ID)"
          export API_ENVIRONMENT="${{parameters.environment}}"
          export PROXY_NAME="communications-manager-${{parameters.environment}}"
          ${{ parameters.test_command }}
        displayName: Run nightly test suite
    - ${{ else }}:
      - template: "azure/components/get-aws-secrets-and-ssm-params.yml@common"
        parameters:
          secret_ids:
            - ptl/azure-devops/apigee-nonprod/APIGEE_OTP_KEY
            - ptl/azure-devops/apigee-nonprod/APIGEE_PASSWORD
          config_ids:
            - /ptl/azure-devops/apigee-nonprod/APIGEE_USERNAME
      - template: "azure/components/get-mfa-code.yml@common"
        parameters:
          apigee_otp_key: $(APIGEE_OTP_KEY)
      - template: "azure/components/get-access-token.yml@common"
        parameters:
          apigee_username: $(APIGEE_USERNAME)
          apigee_password: $(APIGEE_PASSWORD)
      - bash: |
          export NON_PROD_PRIVATE_KEY="$(Pipeline.Workspace)/secrets/$(NON_PROD_PRIVATE_KEY)"
          export NON_PROD_API_KEY="$(NON_PROD_API_KEY)"
          export NON_PROD_API_KEY_TEST_1="$(NON_PROD_API_KEY_TEST_1)"
          export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
          export APIGEE_APP_ID="$(SANDBOX_APP_ID)"
          export STATUS_ENDPOINT_API_KEY="$(STATUS_ENDPOINT_API_KEY)"
          export GUKN_API_KEY="$(GUKN_API_KEY)"
          export UAT_GUKN_API_KEY="$(UAT_GUKN_API_KEY)"
          export UAT_NHS_APP_USERNAME="$(UAT_NHS_APP_USERNAME)"
          export UAT_NHS_APP_PASSWORD="$(UAT_NHS_APP_PASSWORD)"
          export UAT_NHS_APP_OTP="$(UAT_NHS_APP_OTP)"
          export API_ENVIRONMENT="${{parameters.environment}}"
          export PROXY_NAME="communications-manager-${{parameters.environment}}"
          ${{ parameters.test_command }}
        displayName: Run nightly test suite


    - task: PublishTestResults@2
      displayName: 'Publish test results'
      condition: always()
      inputs:
        testResultsFiles: 'test-report.xml'
        failTaskOnFailedTests: true

  - ${{ else }}:
    - bash: |
        export PROXY_NAME="$(FULLY_QUALIFIED_SERVICE_NAME)"
        export API_ENVIRONMENT="${{parameters.environment}}"
        export APIGEE_ACCESS_TOKEN="$(secret.AccessToken)"
        export APIGEE_APP_ID="$(SANDBOX_APP_ID)"
        export STATUS_ENDPOINT_API_KEY="$(STATUS_ENDPOINT_API_KEY)"
        export SOURCE_COMMIT_ID="$(Build.SourceVersion)"
        export NON_PROD_PRIVATE_KEY="$(Pipeline.Workspace)/secrets/$(NON_PROD_PRIVATE_KEY)"
        export NON_PROD_API_KEY="$(NON_PROD_API_KEY)"
        export NON_PROD_API_KEY_TEST_1="$(NON_PROD_API_KEY_TEST_1)"
        export INTEGRATION_PRIVATE_KEY="$(Pipeline.Workspace)/secrets/$(INTEGRATION_PRIVATE_KEY)"
        export INTEGRATION_API_KEY="$(INTEGRATION_API_KEY)"
        export PRODUCTION_PRIVATE_KEY="$(Pipeline.Workspace)/secrets/$(PRODUCTION_PRIVATE_KEY)"
        export PRODUCTION_API_KEY="$(PRODUCTION_API_KEY)"
        ${{ parameters.test_command }}
      workingDirectory: $(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)
      displayName: Run test suite
    - task: PublishTestResults@2
      displayName: 'Publish test results'
      condition: always()
      inputs:
        testResultsFiles: '$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/test-report.xml'
        failTaskOnFailedTests: true
    - ${{ if ne(parameters.unit_test_report_name, '') }}:
      - task: PublishTestResults@2
        displayName: 'Publish unit test results'
        condition: always()
        inputs:
          testResultsFiles: '$(Pipeline.Workspace)/s/$(SERVICE_NAME)/$(SERVICE_ARTIFACT_NAME)/${{ parameters.unit_test_report_name }}'
          failTaskOnFailedTests: true
