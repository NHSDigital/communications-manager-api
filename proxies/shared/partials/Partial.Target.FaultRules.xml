<FaultRule name="combined_backend_fault_handler">
    [% include './partials/Partial.Component.SetResponseDefaults.xml' %]
    <Step>
        <Name>ExtractVariables.ErrorMessage</Name>
        <Condition>
            response.content ~~ "\{\u0022message\u0022:\u0022.*\u0022\}"
        </Condition>
    </Step>
    <Step>
        <Name>ExtractVariables.ErrorDetails</Name>
        <Condition>
            response.content ~~ ".*\u0022errors\u0022:.*"
        </Condition>
    </Step>
    <Step>
        <Name>JavaScript.EnhanceErrorDetails</Name>
        <Condition>
            data.errors != null
        </Condition>
    </Step>
    <Step>
        <Name>JavaScript.TranslateQuotaErrors</Name>
        <Condition>
            error.content ~~ "\{.*\u0022scope\u0022:\u0022proxy\u0022.*\}" or error.content ~~ "\{.*\u0022scope\u0022:\u0022application\u0022.*\}"
        </Condition>
    </Step>
    <Step>
        <Name>RaiseFault.404NhsAppAccounts</Name>
        <Condition>
            (proxy.pathsuffix MatchesPath "/channels/nhsapp/accounts") and response.status.code = 404 and data.errorMessage != null
        </Condition>
    </Step>
    <Step>
        <Name>RaiseFault.400NhsAppAccounts</Name>
        <Condition>
            (proxy.pathsuffix MatchesPath "/channels/nhsapp/accounts") and response.status.code = 400 and data.errorMessage != null
        </Condition>
    </Step>
    <Step>
        <Name>RaiseFault.429NhsAppAccounts</Name>
        <Condition>
            (proxy.pathsuffix MatchesPath "/channels/nhsapp/accounts") and response.status.code = 429 and data.errorMessage != null
        </Condition>
    </Step>
    {% if ENVIRONMENT_TYPE != 'sandbox' %}
        <Step>
            <Name>RaiseFault.401Unauthorized</Name>
            <Condition>
                oauthV2.OauthV2.VerifyAccessToken.failed = true or fault.name = "access_token_expired" or fault.name = "invalid_access_token" or fault.name = "InvalidAccessToken" or fault.name = "access_token_not_approved" or fault.name = "apiresource_doesnot_exist" or fault.name = "InvalidAPICallAsNo" or fault.name = "ApiProductMatchFound"
            </Condition>
        </Step>
    {% endif %}
    <Step>
        <Name>RaiseFault.503ServiceUnavailable</Name>
        <Condition>response.status.code = 403 and response.content ~~ "\{\u0022message\u0022:\u0022Forbidden\u0022\}"</Condition>
    </Step>
    <Step>
        <Name>RaiseFault.403ServiceBan</Name>
        <Condition>response.status.code = 403 and response.content like "*Request rejected because client service ban is in effect*"</Condition>
    </Step>
    <Step>
        <Name>RaiseFault.403Forbidden</Name>
        <Condition>response.status.code = 403</Condition>
    </Step>
    <Step>
        <Name>RaiseFault.404InvalidRoutingPlan</Name>
        <Condition>
          response.status.code = 404 and response.content Like "*Routing Config does not exist for clientId *" and response.content Like "* and routingPlanId *"
      </Condition>
    </Step>
    <Step>
        <Name>RaiseFault.404NotFound</Name>
        <Condition>response.status.code = 404 and data.errors == null</Condition>
    </Step>
    <Step>
        <Name>RaiseFault.413RequestTooLarge</Name>
        <Condition>
            response.status.code = 413 and response.content Like "*Request Too Long*"
        </Condition>
    </Step>
    <Step>
        <Name>RaiseFault.400BackendException.OdsCodeRequired</Name>
        <Condition>response.status.code = 400 and response.content Like "*odsCode must be provided*"</Condition>
    </Step>
    <Step>
        <Name>RaiseFault.400BackendException.CannotSetOdsCode</Name>
        <Condition>response.status.code = 400 and response.content Like "*ODS code override is not enabled*"</Condition>
    </Step>
    <Step>
        <Name>RaiseFault.400BackendException.InvalidRoutingConfig</Name>
        <Condition>response.status.code = 400 and response.content Like "*Invalid Routing Config*"</Condition>
      </Step>
    <Step>
        <Name>RaiseFault.400BackendException.DuplicateRequestItemRefIds</Name>
        <Condition>response.status.code = 400 and response.content Like "*Duplicate requestItemRefIds*"</Condition>
    </Step>
    <Step>
      <Name>RaiseFault.400BackendException.MissingSendingGroupId</Name>
      <Condition>response.status.code = 400 and response.content Like "*Missing sendingGroupId*"</Condition>
    </Step>
    <Step>
        <Name>RaiseFault.400BackendException.MissingRequestRefId</Name>
        <Condition>response.status.code = 400 and response.content Like "*Missing requestRefId*"</Condition>
    </Step>
    <Step>
        <Name>RaiseFault.400BackendException.MissingDataArray</Name>
        <Condition>response.status.code = 400 and response.content Like "*Missing data array*"</Condition>
    </Step>
    <Step>
        <Name>RaiseFault.425RetryTooEarly</Name>
        <Condition>response.status.code = 425</Condition>
    </Step>
    <Step>
        <Name>JavaScript.500DuplicateTemplates.ExtractDuplicates</Name>
        <Condition>
            response.status.code = 500 and response.content Like "*Duplicate templates in routing config: *"
        </Condition>
        </Step>
    <Step>
        <Name>RaiseFault.500DuplicateTemplates</Name>
        <Condition>
            response.status.code = 500 and response.content Like "*Duplicate templates in routing config: *"
        </Condition>
    </Step>
    <Step>
        <Name>RaiseFault.500MissingTemplates</Name>
        <Condition>
            response.status.code = 500 and (
                (
                    response.content Like "*Templates required in *" and response.content Like "* routing config not found*"
                ) or (
                    response.content Like "*NHS App Template does not exist with internalTemplateId:*"
                )
            )
        </Condition>
    </Step>
    <Step>
        <Name>RaiseFault.500Generic</Name>
        <Condition>
            response.status.code = 500 or fault.name = "ScriptExecutionFailed"
        </Condition>
    </Step>
    <Step>
        <Name>RaiseFault.503ServiceUnavailable</Name>
        <Condition>
          fault.name = "ProxyTunnelCreationFailed" or fault.name = "NoResolvedHost" or fault.name = "SslHandshakeFailed" or fault.name = "ServiceUnavailable" or fault.name = "NoActiveTargets" or response.status.code = 503
      </Condition>
    </Step>
    <Step>
        <Name>RaiseFault.504GatewayTimeout</Name>
        <Condition>fault.name = "GatewayTimeout" or response.status.code = 504</Condition>
    </Step>
    <Step>
        <Name>RaiseFault.408RequestTimeout</Name>
        <Condition>fault.name = "RequestTimeout"</Condition>
    </Step>
    <Step>
      <Name>RaiseFault.504GatewayTimeout</Name>
      <Condition>response.status.code = 408</Condition>
    </Step>
    <Step>
      <Name>RaiseFault.502BadGateway</Name>
      <Condition>response.status.code = 502</Condition>
    </Step>
</FaultRule>
